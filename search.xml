<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Skyrmion or Bubble?</title>
      <link href="/804332c6.html"/>
      <url>/804332c6.html</url>
      
        <content type="html"><![CDATA[<p>本文调研了关于bubble以及skyrmion的特点，总结了bubble的类型以及它们的区别。且严格区分了标准skyrmion与skyrmion-bubble的区别。</p><h3 id="Bubble的类型"><a href="#Bubble的类型" class="headerlink" title="Bubble的类型"></a>Bubble的类型</h3><p>所谓的磁泡是一种磁畴结构，在这个磁畴中，磁矩会按照一定的规律进行排列。磁矩表现出顺时针旋转的或者逆时针旋转的或者更加复杂的排列形式。在单轴各向异性的磁体当中，磁泡的形成一般与垂直各向异性、dipolar-dipolar作用有关。而在手性磁体当中则与海森堡交换作用，DM交换作用有关。</p><p>  磁泡的类型按照磁矩的旋转特点可以分为两类。一类是拓扑数不为0，比如为+1或者-1，我们称为（type-I bubble，图1a-b），为纯粹的顺时针旋转或者逆时针旋转；另一类是拓扑数为零<sup><a href="#fn_2" id="reffn_2">2</a></sup>， 单轴磁体的type-II型磁泡中畴壁应包含一对明暗菲涅耳衬比线  为Bloch线(图1c或者图2，图3)。如下图所示：</p><p><img src="../images/DH000005/1.png" alt="图1 a-d为磁结构的示意图，图i-k为模拟的LTEM的电镜图；图l-n为实验上对应的电镜图。[^1]"></p><p><img src="../images/DH000005/2.png" alt="图2 type-II型bubble，包含了一对明暗菲涅耳衬比线[2]"></p><p><img src="../images/DH000005/3.png" alt="图3，type-II型 bubble。[^1]"></p><h3 id="Skyrmion-其实是一类bubble"><a href="#Skyrmion-其实是一类bubble" class="headerlink" title="Skyrmion 其实是一类bubble?"></a>Skyrmion 其实是一类bubble?</h3><p>目前有观点认为skyrmion也是bubble<sup><a href="#fn_3" id="reffn_3">3</a></sup>,<sup><a href="#fn_4" id="reffn_4">4</a></sup>. 那么问题来了，既然是bubble,那为什么一开始要叫skyrmion? 文献<sup><a href="#fn_5" id="reffn_5">5</a></sup>提到:” 斯格明子这个概念最初是在半个世纪前的粒子物理学中提出的，现在可以在螺旋磁性材料中实现的磁性斯格明子。磁性斯格明子的自旋漩涡状织构可以通过拓扑来定义粒子的性质；也就是说，二维平面内的所有组成自旋矩只包围球体一次”，此外文献<sup><a href="#fn_6" id="reffn_6">6</a></sup>也提到：”例如，德里克-霍巴特定理指出，铁磁体中的skyrmions应该收缩并坍缩成线性奇点。一般情况下，Derrick - Hobart定理是成立的，但它不适用于用高阶空间导数项消除不稳定性的模型。1961年，数学物理学家托尼·斯格尔姆( Tony Skyrme ), 介绍了一种三维孤子- -被称为介子和重子的亚原子粒子的解”  <strong>即他在60年代提出了一套用于描述介子(pion)间相互作用的非线性场理论, 并进一步预言了一种具有拓扑保护性质的类粒子稳定场结构的存在, 即斯格明子<sup><a href="#fn_7" id="reffn_7">7</a></sup>.  而拓扑保护是指：禁止连续体中不同拓扑构型磁结构之间的转换<sup><a href="#fn_10" id="reffn_10">10</a></sup>。</strong></p><p><img src="../images/DH000005/4.png" alt=""></p><p>有意思的是，标准skyrmion与skyrmion-bubble(chiral bubble),bubble 是可以通过中心磁矩到外平面的角度进行区分的。因为手性磁泡与普通的磁泡(一般仅仅由dippolar 作用形成)或者标准的skyrmion，它们的某些特性是类似的，比如同样具有拓扑数，同样具有相似的电流驱动性质。甚至它们是可以共存的。因此很多人把手性磁泡(chiral bubble称作 skyrmion bubble)。 但它们是由区别的。比如如下图所示<sup><a href="#fn_8" id="reffn_8">8</a></sup>:</p><p><img src="../images/DH000005/5.png" alt=""></p><p>对于较窄的材料参数范围，DMI会导致斯格明子和气泡的共存。图中上半部分显示，对于DMI等于零的情况，单个能量极小值存在(对于半径R1 ,蓝色曲线)，对应于一个经典的磁泡。如果增大DMI，会出现三个极小值(红色曲线)，分别对应一个斯格明子( RS处)、一个手性为DMI所青睐的手性磁泡( R2处)和一个手性相反且能量较高的第二个气泡( R2’处)。 图的下半部分显示了致密斯格明子(具有本质上对应于畴壁宽度的直径)和手性磁泡的轮廓，它们在中心表现出一个大的磁化平台，并且在靠近边缘的畴壁宽度尺度上发生了剧烈的磁化反转( θ为磁化强度与面外方向的夹角)；从斯格明子到手性磁泡的连续转变是否可能的问题仍然必须定量地解决。这让我想起了Bogdanov的一篇文章的图<sup><a href="#fn_9" id="reffn_9">9</a></sup>：</p><p><img src="../images/DH000005/6.png" alt=""></p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote id="fn_1"><sup>1</sup>. Chakrabartty, D., Jamaluddin, S., Manna, S. K. &amp; Nayak, A. K. Tunable room temperature magnetic skyrmions in centrosymmetric kagome magnet Mn4Ga2Sn. Commun Phys 5, 189 (2022).<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. Nakajima, H., Kotani, A., Harada, K. &amp; Mori, S. Two types of magnetic bubbles in MnNiGa observed via Lorentz microscopy. Jpn. J. Appl. Phys. 60, 123003 (2021).<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. Jiang, W. et al. Blowing magnetic skyrmion bubbles. Science 349, 283–286 (2015).<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. Tang, J. et al. Two-dimensional characterization of three-dimensional magnetic bubbles in Fe3Sn2 nanostructures. National Science Review 8, nwaa200 (2021).<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. Tokura, Y. &amp; Kanazawa, N. Magnetic Skyrmion Materials. Chem. Rev. 121, 2857–2897 (2021).<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. Bogdanov, A. N. &amp; Panagopoulos, C. The emergence of magnetic skyrmions. Physics Today 73, 44–49 (2020).<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. Zhao Wei-Sheng et al. Overview and advances in skyrmionics. Acta Phys. Sin. 67, 131205 (2018).<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_8"><sup>8</sup>. Fert, A., Reyren, N. &amp; Cros, V. Magnetic skyrmions: advances in physics and potential applications. <em>Nat Rev Mater</em><strong>2</strong>, 17031 (2017).<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a></blockquote><blockquote id="fn_9"><sup>9</sup>. Bocdanov, A. &amp; Hubert, A. The Properties of Isolated Magnetic Vortices. phys. stat. sol. (b) 186, 527–543 (1994).<a href="#reffn_9" title="Jump back to footnote [9] in the text."> &#8617;</a></blockquote><blockquote id="fn_10"><sup>10</sup>. Je, S.-G. <em>et al.</em> Direct Demonstration of Topological Stability of Magnetic Skyrmions <em>via</em> Topology Manipulation. <em>ACS Nano</em><strong>14</strong>, 3251–3258 (2020).<a href="#reffn_10" title="Jump back to footnote [10] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基本概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micromagnetic.jl三角形模拟区域的设置</title>
      <link href="/7643df1b.html"/>
      <url>/7643df1b.html</url>
      
        <content type="html"><![CDATA[<p><code>Micromagnetic.jl</code> 是一款基于julia语言的微磁学模拟软件包官方doc地址为<a href="https://magneticsimulation.github.io/MicroMagnetic.jl/stable/">https://magneticsimulation.github.io/MicroMagnetic.jl/stable/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p> 我们的思路是，在三角形区域内，饱和磁化强度为用户设置的数值，而在区域外为0. 因此我们定义一个函数名称为<code>create_triangle_Ms</code> 用以完成上述饱和磁化强度的设置。用户需要传入三个顶点的坐标值，注意在这里，坐标原点为左下角而非中心!</p><p>因此这个函数长这样：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建三角形区域饱和磁化强度函数</span></span><br><span class="line">    <span class="keyword">function</span> create_triangle_Ms(vertices::<span class="built_in">Tuple</span>&#123;<span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;&#125;, Ms::<span class="built_in">Float64</span>)</span><br><span class="line">        <span class="comment"># 解包三角形顶点: ((x0,y0), (x1,y1), (x2,y2))注意原点在左下角！</span></span><br><span class="line">        (x0, y0), (x1, y1), (x2, y2) = vertices</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算三角形面积（2倍）</span></span><br><span class="line">        denom = x0*(y1 - y2) + x1*(y2 - y0) + x2*(y0 - y1)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理退化三角形（面积为0）</span></span><br><span class="line">        <span class="keyword">if</span> denom ≈ <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> (i, j, k, dx, dy, dz) -&gt; <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预计算重心坐标系数</span></span><br><span class="line">        inv_denom = <span class="number">1</span> / denom</span><br><span class="line">        s_c = inv_denom * (y0*x2 - x0*y2)</span><br><span class="line">        s_x = inv_denom * (y2 - y0)</span><br><span class="line">        s_y = inv_denom * (x0 - x2)</span><br><span class="line">        </span><br><span class="line">        t_c = inv_denom * (x0*y1 - y0*x1)</span><br><span class="line">        t_x = inv_denom * (y0 - y1)</span><br><span class="line">        t_y = inv_denom * (x1 - x0)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义主函数</span></span><br><span class="line">        <span class="keyword">function</span> spatial_Ms(i, j, k, dx, dy, dz)</span><br><span class="line">            <span class="comment"># 转换为物理坐标 (忽略z方向)</span></span><br><span class="line">            x = i * dx</span><br><span class="line">            y = j * dy</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算重心坐标</span></span><br><span class="line">            s = s_c + s_x*x + s_y*y</span><br><span class="line">            t = t_c + t_x*x + t_y*y</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 判断点是否在三角形内</span></span><br><span class="line">            <span class="keyword">if</span> (s ≥ <span class="number">0</span>) &amp;&amp; (t ≥ <span class="number">0</span>) &amp;&amp; (s + t ≤ <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> Ms</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="comment">#0.0三角形边缘还有点残留。</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> spatial_Ms</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="三角形的初始磁矩设置"><a href="#三角形的初始磁矩设置" class="headerlink" title="三角形的初始磁矩设置"></a>三角形的初始磁矩设置</h3><p>我们再定义一个三角形区域内初始磁矩的函数<code>create_triangle_M0</code> 以便我们直接输出这个区域。因此我们把这两个函数封装进入一个名为<code>functions.jl</code> 的函数中。如下代码所示：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># functions.jl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment">##########请注意，这个模块所有的原点都在最左下角！！！！！！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块定义 - 将所有函数封装在模块中</span></span><br><span class="line"><span class="keyword">module</span> regionFunction</span><br><span class="line">    <span class="keyword">export</span> create_triangle_Ms,create_triangle_M0</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建三角形区域饱和磁化强度函数</span></span><br><span class="line">    <span class="keyword">function</span> create_triangle_Ms(vertices::<span class="built_in">Tuple</span>&#123;<span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;&#125;, Ms::<span class="built_in">Float64</span>)</span><br><span class="line">        <span class="comment"># 解包三角形顶点: ((x0,y0), (x1,y1), (x2,y2))注意原点在左下角！</span></span><br><span class="line">        (x0, y0), (x1, y1), (x2, y2) = vertices</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算三角形面积（2倍）</span></span><br><span class="line">        denom = x0*(y1 - y2) + x1*(y2 - y0) + x2*(y0 - y1)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理退化三角形（面积为0）</span></span><br><span class="line">        <span class="keyword">if</span> denom ≈ <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> (i, j, k, dx, dy, dz) -&gt; <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预计算重心坐标系数</span></span><br><span class="line">        inv_denom = <span class="number">1</span> / denom</span><br><span class="line">        s_c = inv_denom * (y0*x2 - x0*y2)</span><br><span class="line">        s_x = inv_denom * (y2 - y0)</span><br><span class="line">        s_y = inv_denom * (x0 - x2)</span><br><span class="line">        </span><br><span class="line">        t_c = inv_denom * (x0*y1 - y0*x1)</span><br><span class="line">        t_x = inv_denom * (y0 - y1)</span><br><span class="line">        t_y = inv_denom * (x1 - x0)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义主函数</span></span><br><span class="line">        <span class="keyword">function</span> spatial_Ms(i, j, k, dx, dy, dz)</span><br><span class="line">            <span class="comment"># 转换为物理坐标 (忽略z方向)</span></span><br><span class="line">            x = i * dx</span><br><span class="line">            y = j * dy</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算重心坐标</span></span><br><span class="line">            s = s_c + s_x*x + s_y*y</span><br><span class="line">            t = t_c + t_x*x + t_y*y</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 判断点是否在三角形内</span></span><br><span class="line">            <span class="keyword">if</span> (s ≥ <span class="number">0</span>) &amp;&amp; (t ≥ <span class="number">0</span>) &amp;&amp; (s + t ≤ <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> Ms</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="comment">#0.0三角形边缘还有点残留。</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> spatial_Ms</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#------------------</span></span><br><span class="line">    <span class="keyword">function</span> create_triangle_M0(vertices::<span class="built_in">Tuple</span>&#123;<span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;, <span class="built_in">Tuple</span>&#123;<span class="built_in">Float64</span>,<span class="built_in">Float64</span>&#125;&#125;)</span><br><span class="line">        <span class="comment"># 解包三角形顶点: ((x0,y0), (x1,y1), (x2,y2))注意原点在左下角！</span></span><br><span class="line">        (x0, y0), (x1, y1), (x2, y2) = vertices</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算三角形面积（2倍）</span></span><br><span class="line">        denom = x0*(y1 - y2) + x1*(y2 - y0) + x2*(y0 - y1)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理退化三角形（面积为0）</span></span><br><span class="line">        <span class="keyword">if</span> denom ≈ <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> (i, j, k, dx, dy, dz) -&gt; <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预计算重心坐标系数</span></span><br><span class="line">        inv_denom = <span class="number">1</span> / denom</span><br><span class="line">        s_c = inv_denom * (y0*x2 - x0*y2)</span><br><span class="line">        s_x = inv_denom * (y2 - y0)</span><br><span class="line">        s_y = inv_denom * (x0 - x2)</span><br><span class="line">        </span><br><span class="line">        t_c = inv_denom * (x0*y1 - y0*x1)</span><br><span class="line">        t_x = inv_denom * (y0 - y1)</span><br><span class="line">        t_y = inv_denom * (x1 - x0)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义主函数</span></span><br><span class="line">        <span class="keyword">function</span> spatial_M(i, j, k, dx, dy, dz)</span><br><span class="line">            <span class="comment"># 转换为物理坐标 (忽略z方向)</span></span><br><span class="line">            x = i * dx</span><br><span class="line">            y = j * dy</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算重心坐标</span></span><br><span class="line">            s = s_c + s_x*x + s_y*y</span><br><span class="line">            t = t_c + t_x*x + t_y*y</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 判断点是否在三角形内</span></span><br><span class="line">            <span class="keyword">if</span> (s ≥ <span class="number">0</span>) &amp;&amp; (t ≥ <span class="number">0</span>) &amp;&amp; (s + t ≤ <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="comment">#三角形内部</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> spatial_M</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="主函数的调用"><a href="#主函数的调用" class="headerlink" title="主函数的调用"></a>主函数的调用</h3><p>我们再<code>julia</code> 的脚本中调用我们刚才的函数。我们设置一个<code>256x256x42</code> 以及网格大小为<code>2.5x2.5x2.5</code> nm。 </p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MicroMagnetic</span><br><span class="line"><span class="keyword">using</span> CUDA</span><br><span class="line">set_backend(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">CUDA.versioninfo()</span><br><span class="line"><span class="comment"># 检查文件是否存在，然后引入</span></span><br><span class="line"><span class="keyword">if</span> isfile(<span class="string">&quot;function.jl&quot;</span>)</span><br><span class="line">    include(<span class="string">&quot;function.jl&quot;</span>)</span><br><span class="line">    <span class="keyword">using</span> .regionFunction</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 备用方案或错误处理</span></span><br><span class="line">    error(<span class="string">&quot;user definte function.jl not found!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Nx = <span class="number">256</span>;Ny = <span class="number">256</span>;Nz = <span class="number">43</span></span><br><span class="line">dx1 = <span class="number">2.5e-9</span>;dy1 = <span class="number">2.5e-9</span>;dz1 = <span class="number">2.5e-9</span>;PBC = <span class="string">&quot;open&quot;</span></span><br><span class="line"><span class="comment"># 使用示例 ======================================================================</span></span><br><span class="line"><span class="comment"># 定义三角形顶点：(左下, 右下, 左上)</span></span><br><span class="line">vertices = ((<span class="number">0.0</span>, <span class="number">0.0e-9</span>), (<span class="number">320.0e-9</span>, <span class="number">640.0e-9</span>), (<span class="number">640.0e-9</span>, <span class="number">0.0e-9</span>)) <span class="comment"># 单位：米</span></span><br><span class="line"><span class="comment"># 创建特定三角形区域的Ms函数 (设饱和磁化强度为8e5 A/m)</span></span><br><span class="line">spatial_Ms = create_triangle_Ms(vertices, <span class="number">8e5</span>) <span class="comment">#设置区域内的饱和磁化强度</span></span><br><span class="line">initm0 = create_triangle_M0(vertices)<span class="comment">#设置初始磁矩区域</span></span><br><span class="line">mesh = FDMesh(dx=dx1, dy=dy1, dz=dz1, nx=Nx, ny=Ny, nz=Nz, pbc=PBC)</span><br><span class="line">sim = create_sim(mesh,name=<span class="string">&quot;test_triangle&quot;</span>)</span><br><span class="line">set_driver(sim; driver=<span class="string">&quot;SD&quot;</span>, name=<span class="string">&quot;test_triganle&quot;</span>)</span><br><span class="line">init_m0_random(sim) <span class="comment">#三角形内随机</span></span><br><span class="line">init_m0(sim,initm0) <span class="comment">#此时只是为了显示一个三角形里面的区域</span></span><br><span class="line">save_ovf(sim, <span class="string">&quot;save<span class="subst">$(Nx)</span>x<span class="subst">$(Ny)</span>x<span class="subst">$(Nz)</span>_0mT_initial0&quot;</span>, type =  <span class="built_in">Float64</span>) <span class="comment">#保存初始ovf</span></span><br><span class="line">        </span><br><span class="line">Ms = <span class="number">1200e3</span>;A = <span class="number">1.7e-11</span>;Ku =<span class="number">3e5</span>;Dbulk = <span class="number">0.853e-3</span></span><br><span class="line">set_Ms(sim, spatial_Ms)   <span class="comment"># Set saturation magnetization</span></span><br><span class="line">add_exch(sim, A)  <span class="comment"># Add exchange interaction</span></span><br><span class="line">add_dmi(sim, Dbulk) <span class="comment">#Add DMI , type=&quot;bulk&quot;</span></span><br><span class="line">add_demag(sim)    <span class="comment"># Add demagnetization</span></span><br><span class="line">B = <span class="number">50</span></span><br><span class="line">add_zeeman(sim, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>mT))  <span class="comment"># Apply external magnetic field</span></span><br><span class="line">max_steps=<span class="number">10000</span></span><br><span class="line">relax(sim; max_steps=max_steps,stopping_dmdt=<span class="number">0.01</span>,save_data_every=<span class="number">10</span>)  <span class="comment"># Relax the system</span></span><br><span class="line">save_ovf(sim, <span class="string">&quot;save<span class="subst">$(Nx)</span>x<span class="subst">$(Ny)</span>x<span class="subst">$(Nz)</span>_50mT&quot;</span>, type =  <span class="built_in">Float64</span>)</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li><p>save256x256x43_0mT_initial0.png</p><p><img src="../images/DH000004/save256x256x43_0mT_initial0.png" alt=""></p></li><li><p>save256x256x43_50mT.png</p></li></ul><p><img src="../images/DH000004/save256x256x43_50mT.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微磁学模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Julia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Spirit的安装</title>
      <link href="/9ae686d6.html"/>
      <url>/9ae686d6.html</url>
      
        <content type="html"><![CDATA[<p>Spirit目前有两个版本，一个是基于Qt的版本，一个是<code>IMGUI</code>版本。目前来看Qt版本bug比较少（至少在我的电脑上是这样，另外一个版本无法导入ovf文件）。无论是在windows上还是linux上都需要安装Qt这个软件。那么本文将以windows为例讲述spirit的安装。（其实linux上更加简单只需要装一个Qt即可，然后按照官网提示操作就好了，所以本教程侧重在于Windows用户）。如果不想安装Qt，window和Linux用户可以直接看<code>ImGui</code>编译部分。建议先观看Qt部分。</p><h2 id="windows-C-C-编译器与Cmake的安装"><a href="#windows-C-C-编译器与Cmake的安装" class="headerlink" title="windows C/C++编译器与Cmake的安装"></a>windows C/C++编译器与Cmake的安装</h2><ol><li>首先去网站：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a> 下载安装<code>Community</code>版本的visual Studio,并且安装。如果已经安装可以跳过。</li></ol><p><img src="../images/DH000003/1.png" alt=""></p><ol><li>双击安装程序，之后打开<code>visual studio installer</code>,仅仅只需要勾选<code>使用C++桌面开发</code>然后点击下载（或者修改）。</li></ol><p><img src="../images/DH000003/2.png" alt="勾选“使用C++的桌面开发”"></p><p>等待进度条跑完之后即安装成功。等下还需要安装cmake，linux用户可以使用自带的gcc。</p><ol><li>安装Cmake</li></ol><p>windows用户去Cmake官网的下载页面选择<code>.msi</code>结尾的安装包双击一路默认安装（也可以修改安装位置）。<a href="https://cmake.org/download/">https://cmake.org/download/</a> 。</p><p>linux用户直接<code>sudo apt install cmake</code>.(Fedora用户请自行解决)</p><p><img src="../images/DH000003/3.png" alt="选择.msi结尾的安装包"></p><p><strong>安装过程会让你勾选是否加入系统环境变量，这个请勾选上，非常重要。</strong> 如果不勾选，等下你需要手动加入系统路径，手动把Cmake安装路径的<code>bin</code>目录添加进系统环境变量即可。请参考最后一部分内容。</p><p><img src="../images/DH000003/cmake.png" alt="勾选上cmake的添加到系统环境变量"></p><p>cmake安装完之后，打开终端cmd或者powershell，（快捷方式为桌面下<code>win+x</code>选择终端，或者搜索powershell，cmd都是没问题的）</p><p>然后输入<code>cmake --version</code>回车一下，一般会返回版本信息，如果没返回，需要检查一下，应该是环境没配置好。比如你的安装路径含有中文导致识别不了。</p><p><img src="../images/DH000003/9.png" alt="测试cmake是否安装成功"></p><p>如果安装成功了还可以使用<code>cmake -G</code>来查看编译器。</p><p><img src="../images/DH000003/10.png" alt="查看编译器信息"></p><p>带星号的为当前的编译器。我们等下还要用到，现在先忽略。</p><p>接下来开始介绍Qt的安装.</p><h2 id="Qt-安装"><a href="#Qt-安装" class="headerlink" title="Qt 安装"></a>Qt 安装</h2><ol><li>首先去Qt官网（<a href="https://login.qt.io/login">https://login.qt.io/login</a>）注册一个个人账号。用你的邮箱注册就行，我印象中QQ邮箱注册不了，我换了一个outlook邮箱。反正账号是一定要有的，因为我们使用Qt online installer.</li><li>注册完之后我们进入Qt的下载页面（<a href="https://www.qt.io/download-qt-installer-oss">https://www.qt.io/download-qt-installer-oss</a>），根据自己系统类型选择下载，我选择的是windows版本。</li></ol><p><img src="../images/DH000003/11.png" alt=""></p><p>考虑到这个链接可能被墙，我们可以使用国内镜像地址(我们使用清华源的qt链接： <a href="https://mirrors.tuna.tsinghua.edu.cn/help/qt/">https://mirrors.tuna.tsinghua.edu.cn/help/qt/</a>)(如果上面能下载则跳过用清华源下载的步骤)</p><p>注意，这个页面提示我们打开<code>https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/online_installers/</code>这个链接。那我们就打开它:<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/online_installers/">https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/online_installers/</a></p><p><img src="../images/DH000003/12.png" alt=""></p><p>windows用户选择<code>.exe</code>的x64标签的，linux用户选择<code>.run</code>的x64标签的。注意不要选<code>arm64</code>，除非你的处理器是arm架构的(一般都x64).</p><p><img src="../images/DH000003/13.png" alt="选择合适的qt版本"></p><p>点击一下即可下载。</p><p>无论你是qt官网下载的installer也好，镜象站下载的也好。下载完之后不要着急打开。我们还要设置下载镜像地址，不然等下下载非常慢（巨慢）。找到刚才的下载好的程序。点击程序所在目录的顶部地址栏。在最前面输入cmd英文空格一下然后回车。</p><p><img src="../images/DH000003/14.png" alt=""></p><p><img src="../images/DH000003/15.png" alt="用cmd打开当前目录方式的介绍"></p><p>就会用cmd打开当前目录。</p><p>我们只需要输入installer程序的前几个字母然后按一下<code>tab</code>键就会自动补齐全部名称。比如我的installer名称在商民的图叫<code>qt-online-installer-windows-x64-online.exe</code>那么我只需要输入<code>qt-onl</code>就能补齐这个名称。</p><p><img src="../images/DH000003/16.png" alt="按tab键补齐名称"></p><p>在.exe后面<strong>一个英文空格</strong>，然后在自己的exe后面粘贴进刚才图片中出现的清华源地址<code>--mirror https://mirrors.tuna.tsinghua.edu.cn/qt</code>。注意window和linux地址不一样。因为linux程序没有后缀. </p><p>windows:<code>qt-xxxx.exe --mirror https://mirrors.tuna.tsinghua.edu.cn/qt</code></p><p>linux为：<code>qt-xxxx --mirror https://mirrors.tuna.tsinghua.edu.cn/qt</code></p><p>或者<code>qt-xxxx.run --mirror https://mirrors.tuna.tsinghua.edu.cn/qt</code></p><p>在cmd中点击一下鼠标右键就能粘贴进去。qt-xxx为自己的实际名称。然后回车一下即可，回车之后它会自动弹出installer的界面。最终效果：</p><p><img src="../images/DH000003/17.png" alt="补齐名称后边加入镜像参数"></p><p><img src="../images/DH000003/18.png" alt="qt installer界面"></p><p>点击next,然后填入刚才注册的账号。然后勾选一些条款再点击next.</p><p><img src="../images/DH000003/19.png" alt=""></p><p>这一步设置一下安装目录，自己要记得安装在哪就行。然后取消勾选Qt6.9(以后可能是其他6.X的版本)，勾选上自定义安装，因为我们需要装Qt5不是Qt6. 完成后点击下一步。</p><p><img src="../images/DH000003/20.png" alt=""></p><p>接下来选择<code>show</code>选项，先取消<code>Latest support releases</code>和<code>Preview</code>,然后勾选<code>Archive</code>,不勾选<code>Archive</code>将不会显示Qt5版本。</p><p><img src="../images/DH000003/21.png" alt="勾选Archive"></p><p>然后在qt列表下滑，找到qt5版本（只要是qt5.8以上都没啥大问题），勾选如图所示64位以及Qt chart (32-bit可以勾，我这勾了之后编译的时候需要指定32位编译还是64位编译，一般勾选64位就可以了，但是可以两个都勾选进行对比)。</p><p><img src="../images/DH000003/22.png" alt="勾选32位或者64位，也可以同时勾选"></p><p>然后点击下一步，同意一下条款啥的，静静等待进度条下载完即可。Liunx不要选<code>MSVC</code>. 如果刚才没设置镜像下载可能非常慢。(Qt chart建议选上，不然等下build会报错)</p><p>linux用户如果run程序没反应先设置运行权限<code>chmod +x qtxxxx.run</code>然后再继续镜像链操作。</p><p>至此Qt安装告一段落。总结一下就是注册账号，然后下载在线安装程序，设置一下镜像下载链接。</p><h2 id="编译Spirit"><a href="#编译Spirit" class="headerlink" title="编译Spirit"></a>编译Spirit</h2><p>这一部分将会讲解Qt版本和<code>ImGui</code>版本的编译。装完qt之后Linux用户完全可以按照官网提示的方式进行编译，不用像windows设置什么visual studio 编译器版本。下面重点介绍windows上的编译。</p><p>首先去github仓库把源码下载下来并且解压到你觉得ok的目录。</p><p><img src="../images/DH000003/23.png" alt=""></p><h3 id="使用Qt编译。"><a href="#使用Qt编译。" class="headerlink" title="使用Qt编译。"></a>使用Qt编译。</h3><p>（1）首先修改<code>ui-cpp</code>文件夹的<code>CMakeLists.txt</code>文件。建议用vscode或者notepad++等带行号的工具打开。定位到第104行，windows用户修改第104行,linux用户可以修改第108行。注意目录全部都是斜杠！不是反斜杠！把反斜杠改过来。</p><p>把<code>&quot;C:/QT/5.7/msvc2015/&quot;</code>替换为自己的目录比如<code>&quot;C:/Qt/5.15.0/msvc2019_64&quot;</code>双引号别丢了。然后保存。（<strong>从这里可以看出Spirit默认用的是32为的Qt.</strong> 无所谓，问题不大，我们仍然可以指定64位Qt进行编译。路径中以<code>_64</code> 结尾的是64位的Qt,没有则是32位版本。如路径中<code>msvc2019_64</code> 是64位的Qt ）</p><p><img src="../images/DH000003/24.png" alt="CMakeList.txt中指定Qt路径。如果两个版本的Qt都下载了，可以指定32位或者64位的Qt，取决于你自己。这个CmakeLists.txt在ui-cpp文件夹内，不是spirit主目录下的那个txt文件。"></p><p>（2）使用cmd 或者powershell进入<code>spirit</code>的目录。如果不会使用<code>cd</code>命令，可以像上面那样在地址栏输入<code>cmd</code>进入。</p><p><img src="../images/DH000003/25.png" alt=""></p><p>此时cmd的箭头<code>&gt;</code>前会提示你所在的目录：<br><img src="../images/DH000003/26.png" alt=""></p><p>然后输入<code>mkdir build &amp;&amp; cd build</code>（命令行创建build文件夹并进入该文件夹）或者手动在spirit文件夹内（<code>CMakeLists.txt</code>文件同一级目录下）新建build文件夹，然后用刚才地址栏输入cmd的方法进入build文件夹。最终使用命令行创建并进入build的效果：</p><p><img src="../images/DH000003/27.png" alt=""></p><p>（3）接下来输入<code>Cmkae -G</code>来确认一下编译器信息：</p><p><img src="../images/DH000003/28.png" alt=""></p><p>（4）然后再输入：<code>cmake -G &quot;Visual Studio 17 2022&quot; -A x64 ..</code>注意双引号和点不能省略。<strong>双引号的”Visual Studio 17 2022” 替换为你实际用cmake -G显示的内容。</strong> 意思是配置编译器为<code>Visual Studio 17 2022</code>且编译Windows 64位应用。回车之后会有一堆信息输出，等待它输出完。一般没有提示报错的话我们就进入下一步。如果你使用了32位的Qt，请使用<code>cmake -G &quot;Visual Studio 17 2022&quot; -A win32 ..</code> ，不然的话指定64为编译，使用32位Qt会报错。</p><p><img src="../images/DH000003/29.png" alt=""></p><p>一般最后输出<code>done</code>为配置成功。</p><p><img src="../images/DH000003/30.png" alt=""></p><p>接下来再输入<code>cmake --build . --config Release</code>,这个过程有点慢，需要耐心等待一会。只要没有停下来不要手动去关闭。如果Qt没有配置好的话这个过程就会报错（终端不输出红色的报错信息）。</p><p>看到最后一行输出：<code>Building Custom Rule xxxx</code>就表示编译成功了！<img src="../images/DH000003/31.png" alt=""></p><p>此时，在spirit目录下看到<code>spirit.exe</code>软件。（如果没看到这个提示以及没有.exe程序生成，那么是编译失败了，大概率是qt问题。是不是装了qt6或者是qt32位的却使用了64位编译？如果是后者可以把build文件夹内容全部删除，然后重新指定编译类型试试。）</p><p><img src="../images/DH000003/32.png" alt="编译成功后Spirit目录下会生成.exe程序。"></p><p>然后打开试试：</p><p><img src="../images/DH000003/33.png" alt="spirit Qt版本界面"></p><h3 id="ImGui编译。"><a href="#ImGui编译。" class="headerlink" title="ImGui编译。"></a><code>ImGui</code>编译。</h3><p>进入到下载好的<code>spirit</code>文件夹，找到<code>CMakeList.txt</code>文件，建议用vscode或者notepad++等带行号的工具打开。定位到第35和37行，把<code>SPIRIT_UI_USE_IMGUI</code>由<code>OFF</code>改为<code>ON</code>. 把<code>SPIRIT_UI_CXX_USE_QT</code>由<code>ON</code>改为<code>OFF</code> 如图所示：</p><p><img src="../images/DH000003/34.png" alt=""></p><p>改完之后保存。接着在<code>CMakeList.txt</code>同一级目录下用cmd或者powershell进入<code>build</code>文件夹。没有build就新建一个文件夹。可以进入到build文件夹，点击顶部栏地址，在最前面输入cmd 和英文空格然后回车，即可用cmd进入build文件夹。</p><p>然后在cmd先输入<code>cmake -G &quot;Visual Studio 17 2022&quot; -A x64 ..</code>编译64位（或者<code>cmake -G &quot;Visual Studio 17 2022&quot; -A win32 ..</code>编译32位），后输入<code>cmake --build . --config Release</code>。没有报错的话同样会在spirit目录下看到<code>spirit.exe</code>程序。（如果之前构建过QT，build文件夹就会有之前的东西，请build文件夹的内容全部删除再进行<code>ImGui</code>构建）</p><p><img src="../images/DH000003/35.png" alt="Spirit ImGui界面"></p><h3 id="CUDA编译"><a href="#CUDA编译" class="headerlink" title="CUDA编译"></a>CUDA编译</h3><p>其实cuda编译是一样的，找到spirit目录下的<code>CMakeLists.txt</code> 定位到第23行，把<code>SPIRIT_USE_CUDA</code> 后面的<code>OFF</code> 改为<code>ON</code><br><img src="../images/DH000003/37.png" alt="修改主目录下的CMakeList.txt"><br>接着下滑到90行指定一下CUDA的路径。路径需要具体到版本号文件夹。<br><img src="../images/DH000003/38.png" alt="CUDA路径需要确定到版本号"><br>最后，同样的回到build文件夹，设置编译器进行编译。编译前请清除build文件夹的内容。不需要CUDA编译的时候记得改回去.</p><h2 id="后续处理"><a href="#后续处理" class="headerlink" title="后续处理"></a>后续处理</h2><ol><li>修改了<code>ImGui</code>之后想编译回Qt记得把OFF和On 改回去。</li><li>你可以把<code>input</code>，<code>output</code>文件夹和<code>spirit.exe</code>单独复制到其它地方使用。</li><li>每一次重新编译的时候建议把build的文件夹内容全部删除。</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>（如果qt还是有问题，编译的时候报错（一般情况下直接改CMakeLists.txt的qt路径是没有什么问题的）。）</p><p>进入到Qt安装目录，你会发现有一个以版本号命名的文件夹如<code>5.15.0</code>,将里面<code>msvc</code>开头文件夹里面的bin目录以及Src文件夹里面的qtbase的bin目录添加进环境变量。即：</p><ol><li><code>C:\Qt\5.15.0\msvc2019_64\bin</code></li><li><code>C:\Qt\5.15.0\Src\qtbase\bin</code>（如果有）</li></ol><p>添加方法为win11：找到设置-》系统-》关于-》找到<code>高级系统设置</code>。（linux可以添加进<code>~/.bashrc</code>）</p><p><img src="../images/DH000003/4.png" alt=""></p><p>然后选择选择<code>高级</code>页面，选择<code>环境变量</code></p><p><img src="../images/DH000003/5.png" alt=""></p><p>下滑找到<code>Path</code>然后双击它进入编辑</p><p><img src="../images/DH000003/6.png" alt=""></p><p>点击一下新建，输入路径。</p><p><img src="../images/DH000003/36.png" alt=""></p><p>最后点击三个ok点一下即可。</p><p><img src="../images/DH000003/7.png" alt=""></p><p>最后重新编译试一下。如果还是编译失败，可以仔细读一下报错信息。</p>]]></content>
      
      
      <categories>
          
          <category> 微磁学模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slurm集群上使用jupyter notebook的方法</title>
      <link href="/e966519e.html"/>
      <url>/e966519e.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建虚拟环境并安装jupyter-lab"><a href="#一、创建虚拟环境并安装jupyter-lab" class="headerlink" title="一、创建虚拟环境并安装jupyter lab"></a>一、创建虚拟环境并安装jupyter lab</h2><p>在集群上使用<code>conda creative -n &lt;your_envs&gt; python=3.10</code>来创建一个python虚拟环境并且指定python版本为3.10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n new_env_name python=3.10</span><br><span class="line">conda activate new_env_name</span><br><span class="line">pip install jupyterlab </span><br></pre></td></tr></table></figure><h2 id="二、编辑slurm脚本，在计算节点上运行jupyter-服务"><a href="#二、编辑slurm脚本，在计算节点上运行jupyter-服务" class="headerlink" title="二、编辑slurm脚本，在计算节点上运行jupyter 服务"></a>二、编辑slurm脚本，在计算节点上运行jupyter 服务</h2><ol><li><strong>先在集群里面创建一个文件夹存放运行jupyter lab的slurm脚本。该脚本的位置即为jupyter lab的工作目录。</strong></li><li>创建一个slurm脚本运行<code>jupyterlab</code></li></ol><p>以下是一个slurm脚本运行jupyterlab 的例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#SBATCH --partition=gpu</span></span><br><span class="line"><span class="comment">#SBATCH --nodes=1 </span></span><br><span class="line"><span class="comment">##SBATCH --ntasks-per-node=1</span></span><br><span class="line"><span class="comment">#SBATCH --cpus-per-task=4   #对于r1,一共可以设80</span></span><br><span class="line"><span class="comment">#SBATCH --time=02:00:00</span></span><br><span class="line"><span class="comment">#SBATCH --job-name=DS       # 指定作业名称</span></span><br><span class="line"><span class="comment">#SBATCH --output=output_%j.out     # 输出日志文件</span></span><br><span class="line"><span class="comment">#SBATCH --error=error_%j.err       # 错误日志文件</span></span><br><span class="line"></span><br><span class="line">module load cuda/12.1.0</span><br><span class="line"></span><br><span class="line">conda info --envs</span><br><span class="line"><span class="built_in">source</span> activate deepseek</span><br><span class="line">conda info --envs</span><br><span class="line"></span><br><span class="line">jupyter lab --no-browser --ip=0.0.0.0 --port=8888 --NotebookApp.token=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在<code>jupyter lab --no-browser --ip=0.0.0.0 --port=8888</code>中，</p><ul><li><code>--no-browser</code>表示计算节点运行jupyter lab后不会弹出浏览器。</li><li><code>--ip=0.0.0.0</code>表示所有的ip均可访问jupyter lab服务。</li><li><code>--port=8888</code>表示计算节点上的jupyter lab服务的端口是<code>8888</code>。</li><li><code>--NotebookApp.token=&#39;&#39;</code>不配置token。删除这句表示添加随机token。</li></ul><ol><li>运行行该slurm脚本，在计算节点上运行jupyterlab服务。在<code>.err</code>文件里面记录了jupyterlab 的服务信息，待会会用到。</li></ol><h2 id="三、创建本地映射，本地运行jupyterlab"><a href="#三、创建本地映射，本地运行jupyterlab" class="headerlink" title="三、创建本地映射，本地运行jupyterlab"></a>三、创建本地映射，本地运行jupyterlab</h2><ol><li>当运行完之后，使用<code>sequeue</code>查看一下jupyter lab在哪个计算节点。比如这里在<code>r1</code>节点。</li></ol><p><img src="../images/DH000002/1.png" alt=""></p><p>然后需要知道<code>r1</code>节点的ip. 直接在集群的终端中运行<code>cat /etc/hosts</code>查新<code>r1</code>节点的IP。</p><p>比如这里<code>r1</code>节点的ip是<code>211.66.36.30</code></p><p><img src="../images/DH000002/2.png" alt=""></p><ol><li>现在需要记住该ip,并在本地windows的<code>Powershell</code>中粘贴运行,下面的<code>211.66.36.30</code>为计算节点<code>r1</code>的ip地址。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L8888:211.66.36.30:8888 zfs_yang@211.661.36.241</span><br></pre></td></tr></table></figure><ul><li><code>-L</code>表示windows的本地。<code>-L8888:211.66.36.30:8888</code> 表示windows本地的<code>8888</code>端口映射到<code>211.66.36.30</code>地址的<code>8888</code>端口。</li><li><code>zfs_y@211.661.36.241</code>即为集群的登录账号和ip。默认22端口，这里不做修改。</li></ul><p><strong>注意这里会要求输入集群的密码。建议将本地windows的公钥保存一份到集群的</strong><code>**~/.ssh**</code><strong>文件中，这样能够免输入密码，丝滑连接。具体方式这里不作说明。可以参考</strong><a href="https://blog.csdn.net/savet/article/details/131683156"><strong>vscode通过ssh连接远程服务器+免密登录（图文）</strong></a></p><ol><li>然后，回到<code>.err</code>文件，找到类似于<code>[http://127.0.0.1:8888/lab?token=a7cd6deb3f6a3fc3754066a6e13ab00b55e20de87f17ba72](http://127.0.0.1:8888/lab?token=a7cd6deb3f6a3fc3754066a6e13ab00b55e20de87f17ba72)</code>(上面运行jupyter lab slurm脚本中配置了token才会有token)这个链接，注意token一定要复制，然后把这个链接粘贴到本地windows浏览器中打开即可，此时此刻即可在集群中你创建的虚拟环境中运行jupyter lab服务。没有token对应链接 <code>[http://127.0.0.1:8888/lab](http://127.0.0.1:8888/lab)</code>. </li></ol><p><img src="../images/DH000002/3.png" alt=""></p><p><strong>检查一下卡是否可以用：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_available_gpus</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查并返回可用的NVIDIA GPU数量。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        num_gpus = torch.cuda.device_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;可用的NVIDIA GPU数量: <span class="subst">&#123;num_gpus&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_gpus):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span> 名称: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到可用的NVIDIA GPU。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数检查可用的GPU</span></span><br><span class="line">check_available_gpus()</span><br></pre></td></tr></table></figure><p><img src="../images/DH000002/4.png" alt=""></p><p>注意事项：</p><ul><li><strong>目前jupyterlab只能配置使用1个节点，暂时没法同时使用两个节点。</strong>如果需要结束jupyter lab服务，只需要在slurm中使用<code>scancel</code>结束任务即可，不然不设置时间会一直占用集群资源。关闭本地的powershell窗口只会关闭本地的连接，重新开一个powershell窗口再运行上面的ssh即可重新恢复链接。此时原来的token链接还是可以用的。但是如果使用<code>scancel</code>结束jupyterlab 服务，再次运行时候，token会发生变化，也就是链接会发生变化。但是token是可以配置固定的，这里不进行说明。</li></ul><h2 id="四、jupyter-notebook更换内核"><a href="#四、jupyter-notebook更换内核" class="headerlink" title="四、jupyter notebook更换内核"></a>四、jupyter notebook更换内核</h2><p>理论上现在的jupyter notebook的内核是你在上面激活的虚拟环境。这时候可以参考：<a href="https://juejin.cn/post/7321896126312300559">Python虚拟环境轻松配置：Jupyter Notebook中的内核管理指南本文提供了一份详细指南，介绍了如何创建Py - 掘金</a> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fourier级数与Fourier变换</title>
      <link href="/8ba9dd18.html"/>
      <url>/8ba9dd18.html</url>
      
        <content type="html"><![CDATA[<p>因为mathjax 的CDN问题，数学公式可能显示有问题。可以尝试多刷新几遍网页。数学公式可以左右滑动~</p><h2 id="一、函数的傅里叶级数展开"><a href="#一、函数的傅里叶级数展开" class="headerlink" title="一、函数的傅里叶级数展开"></a>一、函数的傅里叶级数展开</h2><p>我们考虑一个以$2\pi$为周期的函数$ f(x)\ $,则有：$ f(x+2\pi)=f(x) $.我们将其进行傅里叶级数展开有：</p><script type="math/tex; mode=display">f(x)=c_0+a_1\cos x+a_2\cos 2x+...+b_1\sin x+b_2\sin2x+...= c_0+\sum_{n=1}^{\infty}a_n\cos nx+\sum_{n=1}^{\infty}b_n\sin nx\tag{1}</script><p>当我们用e指数展开时，根据欧拉公式有：</p><script type="math/tex; mode=display">e^{i\phi}=\cos\phi+i\sin\phi \tag{2}</script><p>因此有：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{matrix}  \cos\phi = \frac{1}{2}(e^{i\phi}+e^{-i\phi})\\\\\sin\phi=\frac{1}{2}(e^{i\phi}-e^{-i\phi})\tag{3}\end{matrix}\right.\end{equation}</script><p>将式子(3)代入式子(1)有：</p><script type="math/tex; mode=display">\begin{align}f&=c_0+\sum_{n=1}^{\infty}\frac{1}{2}a_n(e^{inx}+e^{-inx})+\sum_{n=1}^{\infty}\frac{1}{2i}b_n(e^{inx}-e^{-inx})\\&= c_0+\sum_{n=1}^{\infty}\frac{1}{2}(a_n-ib_n)+\sum_{n=1}^{\infty}\frac{1}{2}(a_n+ib_n)\end{align}</script><p>此时，引入标注 $ c_n = \sum_{n=1}^{\infty}\frac{1}{2}(a_n-ib_n)\ $ 和$ c_n=\sum_{n=1}^{\infty}\frac{1}{2}(a_n+ib_n).$</p><p>傅里叶级数变为：</p><script type="math/tex; mode=display">f=c_0+\sum_{n=1}^{\infty}c_ne^{inx}+\sum_{n=1}^{\infty}c_{-n}e^{-inx}\tag{4}</script><p>如果我们拓展n的范围即从$ n\rightarrow-n $则式（4）可以写成：</p><script type="math/tex; mode=display">f(x)=\sum_{-\infty}^{\infty}c_ne^{inx}\tag{5}</script><h2 id="二、Fourier-级数的系数"><a href="#二、Fourier-级数的系数" class="headerlink" title="二、Fourier 级数的系数"></a>二、Fourier 级数的系数</h2><p>从上面的步骤，我们已经获取了$ f(x) $复数形式的傅里叶级数。</p><p>即 $ f=c_0+c_1e^{ix}+c_2 e^{2ix} + …. + c_{-1} e^{-ix}+ c_{-2}e^{-2x} +.. + $</p><p>我们将根据以下步骤求解其系数$ c_0,c_1,….,c_n $</p><ul><li>利用公式$ \int_{0}^{2\pi} e^{inx}dx = 2\pi\delta_{n,0} $ </li><li>方程两边同时乘以$ e^{-inx}\text{或} e^{inx} $,然后再进行积分.</li></ul><p>若求$ c_0 $：<br>两边直接从0到$2\pi$进行积分有:</p><script type="math/tex; mode=display">\begin{align}\int_{0}^{2\pi}f(x)dx&=c_0\int_{0}^{2\pi}dx+c_1\int_{0}^{2\pi}e^{inx}dx+c_2\int_{0}^{2\pi}e^{2inx}dx+..+...\\&\Longrightarrow c_0=\frac{1}{2\pi}\int_{0}^{2\pi}f(x)dx \end{align}</script><p>若求$ c_n $则两边同乘以$ e^{-inx}$<br> 再对两边同时积分，即<script type="math/tex">c_n=\frac{1}{2\pi}\int_{0}^{2\pi}f(x) e^{-inx}dx</script></p><h2 id="三、处理周期不为-2-pi-的函数"><a href="#三、处理周期不为-2-pi-的函数" class="headerlink" title="三、处理周期不为$ 2\pi $的函数"></a>三、处理周期不为$ 2\pi $的函数</h2><p>设$ f(x) $的周期为T，为了区分我们令$ X = T $，$ x= 2\pi $.</p><p>则有：$ \frac{X}{x}=\frac{T}{2\pi}\Longrightarrow x= \frac{2\pi}{T}X $</p><p>将此处的小x替换原来级数展开式(5)中的x,有：</p><p>$ f(x)= \sum_{-\infty}^ {\infty} c_n e^{\frac{inx}{T} x} $</p><p>为了方便的计算，我们让周期为某个数的二倍，即$ T=2l $</p><p>$ f=\sum_{\infty}^{\infty} c_n e^{\frac{in\pi}{l}x} $</p><p>$ c_n=\frac{1}{2l}\int_{-l}^{l}f(x) e^{\frac{-in\pi}{l}x}dx $</p><h2 id="四、处理无周期结构的函数"><a href="#四、处理无周期结构的函数" class="headerlink" title="四、处理无周期结构的函数"></a>四、处理无周期结构的函数</h2><p>处理无周期的函数的时候，我们假设其周期是无穷大，即$ l\rightarrow \infty $.</p><p>我们设$ k_n=\frac{n\pi x}{l} $,在相邻的n中，$ \Delta n = 1 $,而$ \Delta k = \frac{\pi}{l}\Delta n. $</p><p>我们可以将式子(5)$ f(x)=\sum_{-\infty}^{\infty}c_n e^{inx} $改写为：</p><script type="math/tex; mode=display">\begin{align}f(x)&=\sum_{-\infty}^{\infty}c_ne^{ik_nx}\cdot\Delta n\\&=\frac{l}{\pi}\sum_{-\infty}^{\infty}c_ne^{ik_nx}\Delta k\end{align}</script><p>此时$ c_{k_n}=\frac{1}{2L}\int_{-l}^{l}f(x) e^{-ik_nx}dx $</p><p>显然，当$ l\rightarrow\infty $时，$ c_{k_n}\rightarrow 0 $,且$ f(x) $会发散（分子含有L）.</p><p>此时构造$ g_{k_n}=\frac{l\cdot c_n}{\pi} $,当$ l\rightarrow 0 $时，$ g_{k_n} $才有机会收敛为某一个定值。</p><p>那么$ f(x)=\sum_{-\infty}^{\infty}g_{k_n} e^{ik_nx}\cdot\Delta k $</p><p>$ g_{k_n}=\frac{1}{2\pi}\int_{-l}^{l}f(x) e^{-ik_nx}dx $</p><p>将其写成连续的形式有：</p><p>$ f(x)=\int_{-\infty}^{\infty}g(k) e^{ikx}dk<br> $</p><p>$ g(k)=\frac{1}{2\pi}\int_{-\infty}^{\infty}f(x) e^{-ikx}dx $.</p><p>此时，我们将函数$ g(k) $称为$ f(x) $的傅里叶变换.</p><p><a href="https://www.physics.uoguelph.ca/chapter-9-fourier-transform">reference 1</a></p>]]></content>
      
      
      <categories>
          
          <category> 磁学与数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地创建或管理Python虚拟环境</title>
      <link href="/a59a3594.html"/>
      <url>/a59a3594.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要创建虚拟环境？不用虚拟环境行不行？"><a href="#为什么要创建虚拟环境？不用虚拟环境行不行？" class="headerlink" title="为什么要创建虚拟环境？不用虚拟环境行不行？"></a>为什么要创建虚拟环境？不用虚拟环境行不行？</h2><p>当然你可以不用虚拟环境。创建虚拟环境是为了方便管理我们本地的Python项目。比如我有两个项目A和B. A和B之间它们所需要的包依赖版本可能不一样，甚至python版本也不一样。如果两个项目混在一起运行，当项目A崩溃的时候可能会影响到项目B. 此时虚拟环境就能很好地把它们隔离开，让两个项目的运行互不干扰。</p><h2 id="如何创建虚拟环境？"><a href="#如何创建虚拟环境？" class="headerlink" title="如何创建虚拟环境？"></a>如何创建虚拟环境？</h2><p>创建虚拟环境的工具有很多，这里主要介绍<strong>两种</strong>常见的创建方式。</p><h3 id="python自带的方式创建-pycharm中常见的方式"><a href="#python自带的方式创建-pycharm中常见的方式" class="headerlink" title="python自带的方式创建(pycharm中常见的方式)"></a>python自带的方式创建(pycharm中常见的方式)</h3><p>第一种是用python自带的工具创建虚拟环境。只要你下载的python版本大于等于3.3(目前最新的已经是3.13，隔了十来个版本)就可以直接用python自带的<code>venv</code>虚拟环境。这种方式是pycharm上创建python项目虚拟环境的默认方式。pycharm会在当前项目的文件夹中创建一个<code>venv</code>文件夹，这个文件夹就是该虚拟环境存放包的主要地方。你的python项目在哪个路径，虚拟环境就会在这个路径的<code>venv</code>目录下。pycharm创建一个项目的时候会默认创建这个文件夹，所以我们不用太担心。</p><p><img src="../images/DH00001/1.png" alt=""></p><p>你要做的只需要去python官网下载一个python解释器，然后安装，配置好python环境。然后打开pycharm, 在pycharm中新建一个项目，默认就会创建<code>venv</code>虚拟环境。如想删除虚拟环境，只需要把整个<code>venv</code>文件夹删除即可。</p><h3 id="使用conda创建虚拟环境-如果你不想用pycharm-推荐学习一下"><a href="#使用conda创建虚拟环境-如果你不想用pycharm-推荐学习一下" class="headerlink" title="使用conda创建虚拟环境(如果你不想用pycharm, 推荐学习一下)"></a>使用conda创建虚拟环境(如果你不想用pycharm, 推荐学习一下)</h3><p>不想使用pycharm,只想轻量地运行python项目。那么可以看一下~</p><p>conda是python的一个包管理器。可以用来给python项目安装依赖包以及创建管理虚拟环境。目前<code>Anconda</code>会自带<code>conda</code>, 但<code>Anconda</code>是一个巨大的包，里面自带了很多python包，比如<code>numpy</code>等。比较臃肿。如果想使用<code>conda</code>不太建议用Anconda, 推荐使用<code>Mini-anconda</code>,它是<code>Anconda</code>的精简版本，只包含了<code>caonda</code>管理器和一些必要的依赖。</p><p>如果想使用conda创建的虚拟环境，可以去Anconda官网或者一些镜像的网站下载安装<code>miniconda</code>。可以参考：<a href="https://www.cnblogs.com/ajianbeyourself/p/17310681.html">miniconda的安装</a>。如果你装了Anconda也没关系的，<strong>下面的操作同样适用于Anconda。</strong></p><p>假如你是Windos用户，miniconda或者Anconda 安装好了之后强烈推荐在<strong>开始</strong>菜单里面的<code>Anconda Prompt</code></p><p>或者<code>Anconda PowerShell Prompt</code>操作。</p><p><img src="../images/DH00001/2.png" alt=""></p><p>点开你就会发现是一个黑乎乎的命令框(终端)。这就对了！有了这终端，你就可以和所有的conda环境进行友好地对话。</p><p><img src="../images/DH00001/3.png" alt=""></p><p>括号里的<code>(base)</code>表明当前的python环境是<code>base</code>,括号里面显示的名字是什么，就对应哪个虚拟环境。比如现在显示base,就对应conda默认的环境base.  此外你只需要掌握三个命令即可轻松对话conda以及操控它的虚拟环境。这三个命令下面将会一一介绍。</p><h4 id="创建环境：conda-create-n-lt-你的虚拟环境名字-gt"><a href="#创建环境：conda-create-n-lt-你的虚拟环境名字-gt" class="headerlink" title="创建环境：conda create -n &lt;你的虚拟环境名字&gt;"></a><strong>创建环境</strong>：<code>conda create -n &lt;你的虚拟环境名字&gt;</code></h4><p>把尖括号整体换掉你想要的名字即可。比如：<code>conda create -n myven</code>创建了一个名字是myven 的虚拟环境。此时你也可以指定python版本，不指定则是默认conda自带的python版本（取决于你安装conda的版本）。指定很简单：<code>conda create -n myven python=3.10</code>(myven后面空格一下，输入python=3.10)指定了python 3.10的版本。-n 表示name的缩写。</p><p><img src="../images/DH00001/4.png" alt=""></p><p>这个过程会让你输入<code>y</code>回车确定，比如上图的圆圈2。</p><p>创建完之后，只需要按照提示激活环境即可。比如上图的圆圈3，提示你使用<code>conda activate myven</code>激活进入环境，用<code>conda deactivate</code>退出环境。你可以在任意环境中使用<code>conda activate myven</code>进入<code>myven</code>虚拟环境。激活其它环境只需要将<code>activate</code>后面的环境名字换掉即可。</p><p><img src="../images/DH00001/5.png" alt=""></p><p>当我输入激活环境命令以后，旁边的<code>(base)</code>就换成了<code>(myven)</code>表示你已经成功进入这个虚拟环境。如果没出现则表示进入失败，一般不可能进入失败的，检查一下单词拼对了没有。在这个虚拟环境下（myven）, 安装的包也会在这个环境中安装。哪个环境你就看括号里面的名称就行了，不复杂。</p><p>需要注意：<strong>当前激活的环境仅仅对当前这个命令窗口（终端）生效</strong>。你新开一个窗口或终端就会变成<code>base</code>环境(比如下图)。需要重新激活进入。除非你一直保留这个窗口。这个命令窗口(终端)在你不操作的时候 比如我在当前窗口没有执行任何包的安装，且窗口没有程序命令输出，这个时候直接关闭命令窗口是不影响环境的，下次进来的时候重新激活一下环境即可。</p><p><img src="../images/DH00001/6.png" alt=""></p><p>需要注意，<strong>一定要看清楚括号里面的是哪个环境</strong>，不然一不小心装进<code>base</code>环境。当然你也可以在cmd 或者power shell中运行上述命令。但是power shell 或者cmd 激活环境的时候<strong>很容易遇到初始化错误</strong>，因此最省事且最安全的方式还是直接在<code>Anconda Power Shell Prompt</code>或者<code>Anconda Prompt</code>中使用。同理，power shell 或者cmd里面<strong>没有看到括号说明未激活进入虚拟环境</strong>，激活虚拟环境无论在哪个终端，你都会看到一个括号，包括前面提到的<code>venv</code>。没看到括号就说明当前的命令窗口(终端)没有激活环境。此时不要轻易执行python包的安装命令。</p><h4 id="查看虚拟环境有哪些-conda-env-list"><a href="#查看虚拟环境有哪些-conda-env-list" class="headerlink" title="查看虚拟环境有哪些:conda env list"></a><strong>查看虚拟环境有哪些</strong>:<code>conda env list</code></h4><p>这是你需要掌握的第二个命令，查看一下有哪些虚拟环境，比如时间久了你忘记了有哪些虚拟环境。或者虚拟环境名字一下子记不住，但想激活，即可使用这个命令查看。</p><p><img src="../images/DH00001/7.png" alt=""></p><p>此时左边的表示虚拟环境的名称，右边对应虚拟环境保存的路径。星号<code>*</code>表示当前所在的虚拟环境。如果你想更改虚拟环境的目录，请看这里：<a href="https://zhuanlan.zhihu.com/p/649072923">【知乎】anaconda的envs路径跑到c盘了，修改为D盘</a>。一般我觉得没必要改，除非你内存不够。</p><p>如果你想删除这个虚拟环境，直接跑到目录下删掉即可，然后<code>conda env list</code>就不会显示。还有没有更优雅的删除方式？当然有！</p><h4 id="删除虚拟环境：conda-remove-n-xxxxx-名字-all"><a href="#删除虚拟环境：conda-remove-n-xxxxx-名字-all" class="headerlink" title="删除虚拟环境：conda remove -n xxxxx(名字) --all"></a><strong>删除虚拟环境</strong>：<code>conda remove -n xxxxx(名字) --all</code></h4><p>比如<code>conda remove -n myven --all</code>。即可优雅的删除虚拟环境<code>myven</code>。这是第三个命令。</p><p>前提是你要退出这个虚拟环境<code>conda deactivate</code>一下再执行。不然删除失败。这个过程同样需要你输入<code>y</code>回车确认。</p><p><img src="../images/DH00001/8.png" alt=""></p><p>此时你再使用<code>conda env list</code>就会发现已经没有<code>env</code>环境了。</p><p><img src="../images/DH00001/9.png" alt=""></p><p>因此你只需掌握上面三条命令以及延伸生出来额外两条激活与退出命令即可优雅轻松的使用你的虚拟环境。</p><p>快速总结以及复习一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda create -n myven <span class="comment">#创建一个名字是myven的虚拟环境,-n是name名字的缩写。</span></span><br><span class="line">conda activate myven  <span class="comment">#激活myven虚拟环境，可以在任意环境下使用。</span></span><br><span class="line">conda deactivate <span class="comment">#退出环境，在窗口没有工作时，可以直接关闭窗口退出。</span></span><br><span class="line">conda <span class="built_in">env</span> list   <span class="comment">#查看有哪些虚拟环境以及它们所在的目录。</span></span><br><span class="line">conda remove n myven --all <span class="comment">#删除myven虚拟环境</span></span><br></pre></td></tr></table></figure><h4 id="minniconda-换源"><a href="#minniconda-换源" class="headerlink" title="minniconda 换源"></a>minniconda 换源</h4><p>为什么要换源？因为默认官方的源下载依赖包的时候特别慢，有可能需要fanqiang.</p><p>此时直接访问清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p><p>根据提示把下图圈1的代码粘贴到圈2的文件中去，然后回到conda命令行刷新一下即可。</p><p><img src="../images/DH00001/1.png" alt="">即：先找到<code>.condarc</code>文件，</p><p><img src="../images/DH00001/11.png" alt="">若是找不到这个<code>.condarc</code>文件(一般是能找到的)，可以在<code>Anconda Power Shell Prompt</code>终端中执行：</p><p><code>conda config --set show_channel_urls yes</code> 即可像这样：</p><p><img src="../images/DH00001/12.png" alt=""></p><p>打开<code>.condarc</code>后粘贴从刚才网站复制的内容然后按<code>crtl</code>+<code>S</code>保存:</p><p><img src="../images/DH00001/13.png" alt=""></p><p><code>.condarc</code>会有原来的源链接内容，可以全部删除。不用纠结删除会怎么样。就一个源而已。</p><p>回到<code>Anconda Power Shell Prompt</code>终端，关闭了就重开一个，没什么大不了的。刷新源一下：输入</p><p><code>conda clean -i</code>回车后提示输入y 然后回车继续，即可使用清华源。其它源也一样。建议：<strong>换源的时候一定要去官方的源网站去换，比如刚才的清华源链接。不要求其他论坛比如CSDN上去换，那边的源有可能链接是旧的。</strong></p><p><img src="../images/DH00001/14.png" alt=""></p><h4 id="在pycharm中使用conda虚拟环境（有bug-但不影响整体使用）"><a href="#在pycharm中使用conda虚拟环境（有bug-但不影响整体使用）" class="headerlink" title="在pycharm中使用conda虚拟环境（有bug,但不影响整体使用）"></a>在pycharm中使用conda虚拟环境（有bug,但不影响整体使用）</h4><p>没错，你没看错，pycharm同样支持使用conda的虚拟环境。非常简单！</p><p>现在我举个例子：我先创建一个<code>myven2</code>的虚拟环境：开始菜单里面打开<code>Anconda PowerShell prompt</code>输入<code>conda create -n myven2</code>创建好了就行，先不用激活。</p><p>现在还记得上面找虚拟环境的路径的命令吗？对就是<code>conda env list</code>待会要用到</p><p><img src="../images/DH00001/15.png" alt=""></p><p>现在打开pycharm.你可以新建一个项目，或者用原来的项目，这个都没事。点击右下角的虚拟环境，然后选择<code>Add New Interpreter</code>添加新的解释器。原因是一个虚拟环境对应一个python解释器。</p><p><img src="../images/DH00001/16.png" alt=""></p><p>之后选择侧边选择<code>Conda Environment</code>然后选择现有的环境，最后下拉找到刚才创建的环境<code>myven2</code>即可。最后点击<code>ok</code>.</p><p><img src="../images/DH00001/17.png" alt="">现在右下角就会显示虚拟环境为<code>myven2</code>.如果列表没显示，就需要手动输入conda的安装路径查找。</p><p><img src="../images/DH00001/18.png" alt=""><strong>bug: 千万不要使用Pycharm自带的终端启动或安装任何东西！(仅仅针对conda创建的虚拟环境下)</strong>。因为终端里面的PS (下图第一条红线PS)左边不显示<strong>不显示括号+虚拟环境</strong>的名字。所以这个终端肯定是没有激活虚拟环境的。但是不影响在pycharm中安装依赖包。pycharm中安装其它包是会安装到当前虚拟环境<code>myven2</code>下的，但是终端并不支持，可能是bug。 <strong><font style="color:#DF2A3F;">但没关系，我们可以使用刚才的</font></strong><code>**&lt;font style=&quot;color:#DF2A3F;&quot;&gt;Anconda Powershell Prompt&lt;/font&gt;**</code><strong><font style="color:#DF2A3F;">中激活</font></strong><code>**&lt;font style=&quot;color:#DF2A3F;&quot;&gt;myven2&lt;/font&gt;**</code><strong><font style="color:#DF2A3F;">环境来代替这个终端。</font></strong>比如说安装或者启动jupyter lab，我们可以在<code>Anconda Powershell Prompt</code>中先激活对应的环境，然后再执行相关的安装/启动 命令。</p><p><img src="../images/DH00001/19.png" alt=""></p><p>如果是使用python自带的虚拟环境<code>.ven</code> PS 左边会有括号+虚拟环境名字venv 这才是这个终端激活了虚拟环境。没有的一律没激活虚拟环境。</p><p><img src="../images/DH00001/20.png" alt=""></p><p>尽管conda 在pycharm中存在这个bug, 但这无妨，我们还是可以了解一下conda 的虚拟环境是如何使用的。</p><h2 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h2><p>装了pycharm没必要再装miniconda。除非你电脑内存不足。其实pycharm更加智能一点，但也会有bug，比如图片弹不出来，但可以设置保存图片。如果你想体验Vscode或者不想用pycahrm,只想轻量运行python项目那就建议装conda. 其实运行jupyter notebook也是不需要安装conda,pycharm和浏览器中也可以运行notebook,但是pycharm需要专业版。浏览器上没有代码补齐的提示。</p><p>但是在服务器里面是用不了pycharm的，操作也是类似的，服务器上使用conda更加方便，只需要安装miniconda的<code>.sh</code>文件（不需要root）, 然后配置一下conda环境,把conda加入进系统环境。再结合上面的三条命令基本没问题。可以参考：<a href="https://www.cnblogs.com/netWild/p/18289735">https://www.cnblogs.com/netWild/p/18289735</a></p><p>如果无法无法运行.sh文件，则赋予其执行权限<code>chmod +x xxx.sh</code> 然后再运行<code>./xxx.sh</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
